import {
  init_lib22 as init_lib,
  lib_exports21 as lib_exports
} from "./chunk-WTEALDGX.js";
import "./chunk-A6ABPBWK.js";
import "./chunk-L3LPOETZ.js";
import "./chunk-2PXFZ4CE.js";

// node_modules/@wagmi/core/dist/providers/alchemy.js
init_lib();
function alchemyProvider({
  apiKey,
  priority,
  stallTimeout,
  weight
}) {
  return function(chain) {
    var _a, _b;
    if (!((_a = chain.rpcUrls.alchemy) == null ? void 0 : _a.http[0]))
      return null;
    return {
      chain: {
        ...chain,
        rpcUrls: {
          ...chain.rpcUrls,
          default: { http: [`${(_b = chain.rpcUrls.alchemy) == null ? void 0 : _b.http[0]}/${apiKey}`] }
        }
      },
      provider: () => {
        var _a2, _b2;
        const provider = new lib_exports.AlchemyProvider(
          {
            chainId: chain.id,
            name: chain.network,
            ensAddress: (_b2 = (_a2 = chain.contracts) == null ? void 0 : _a2.ensRegistry) == null ? void 0 : _b2.address
          },
          apiKey
        );
        return Object.assign(provider, { priority, stallTimeout, weight });
      },
      webSocketProvider: () => {
        var _a2, _b2;
        return new lib_exports.AlchemyWebSocketProvider(
          {
            chainId: chain.id,
            name: chain.network,
            ensAddress: (_b2 = (_a2 = chain.contracts) == null ? void 0 : _a2.ensRegistry) == null ? void 0 : _b2.address
          },
          apiKey
        );
      }
    };
  };
}
export {
  alchemyProvider
};
//# sourceMappingURL=wagmi_providers_alchemy.js.map
